<?php
/**
 * ErrorResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Soxyl\Saferpay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Saferpay JSON API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Soxyl\Saferpay\Model;

use \ArrayAccess;
use \Soxyl\Saferpay\ObjectSerializer;

/**
 * ErrorResponse Class Doc Comment
 *
 * @category Class
 * @package  Soxyl\Saferpay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ErrorResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ErrorResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response_header' => '\Soxyl\Saferpay\Model\ResponseHeader',
        'behavior' => 'string',
        'error_name' => 'string',
        'error_message' => 'string',
        'transaction_id' => 'string',
        'error_detail' => 'string[]',
        'processor_name' => 'string',
        'processor_result' => 'string',
        'processor_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'response_header' => null,
        'behavior' => null,
        'error_name' => null,
        'error_message' => null,
        'transaction_id' => null,
        'error_detail' => null,
        'processor_name' => null,
        'processor_result' => null,
        'processor_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_header' => 'ResponseHeader',
        'behavior' => 'Behavior',
        'error_name' => 'ErrorName',
        'error_message' => 'ErrorMessage',
        'transaction_id' => 'TransactionId',
        'error_detail' => 'ErrorDetail',
        'processor_name' => 'ProcessorName',
        'processor_result' => 'ProcessorResult',
        'processor_message' => 'ProcessorMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_header' => 'setResponseHeader',
        'behavior' => 'setBehavior',
        'error_name' => 'setErrorName',
        'error_message' => 'setErrorMessage',
        'transaction_id' => 'setTransactionId',
        'error_detail' => 'setErrorDetail',
        'processor_name' => 'setProcessorName',
        'processor_result' => 'setProcessorResult',
        'processor_message' => 'setProcessorMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_header' => 'getResponseHeader',
        'behavior' => 'getBehavior',
        'error_name' => 'getErrorName',
        'error_message' => 'getErrorMessage',
        'transaction_id' => 'getTransactionId',
        'error_detail' => 'getErrorDetail',
        'processor_name' => 'getProcessorName',
        'processor_result' => 'getProcessorResult',
        'processor_message' => 'getProcessorMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response_header'] = isset($data['response_header']) ? $data['response_header'] : null;
        $this->container['behavior'] = isset($data['behavior']) ? $data['behavior'] : null;
        $this->container['error_name'] = isset($data['error_name']) ? $data['error_name'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['error_detail'] = isset($data['error_detail']) ? $data['error_detail'] : null;
        $this->container['processor_name'] = isset($data['processor_name']) ? $data['processor_name'] : null;
        $this->container['processor_result'] = isset($data['processor_result']) ? $data['processor_result'] : null;
        $this->container['processor_message'] = isset($data['processor_message']) ? $data['processor_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['response_header'] === null) {
            $invalidProperties[] = "'response_header' can't be null";
        }
        if ($this->container['behavior'] === null) {
            $invalidProperties[] = "'behavior' can't be null";
        }
        if ($this->container['error_name'] === null) {
            $invalidProperties[] = "'error_name' can't be null";
        }
        if ($this->container['error_message'] === null) {
            $invalidProperties[] = "'error_message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_header
     *
     * @return \Soxyl\Saferpay\Model\ResponseHeader
     */
    public function getResponseHeader()
    {
        return $this->container['response_header'];
    }

    /**
     * Sets response_header
     *
     * @param \Soxyl\Saferpay\Model\ResponseHeader $response_header response_header
     *
     * @return $this
     */
    public function setResponseHeader($response_header)
    {
        $this->container['response_header'] = $response_header;

        return $this;
    }

    /**
     * Gets behavior
     *
     * @return string
     */
    public function getBehavior()
    {
        return $this->container['behavior'];
    }

    /**
     * Sets behavior
     *
     * @param string $behavior behavior
     *
     * @return $this
     */
    public function setBehavior($behavior)
    {
        $this->container['behavior'] = $behavior;

        return $this;
    }

    /**
     * Gets error_name
     *
     * @return string
     */
    public function getErrorName()
    {
        return $this->container['error_name'];
    }

    /**
     * Sets error_name
     *
     * @param string $error_name error_name
     *
     * @return $this
     */
    public function setErrorName($error_name)
    {
        $this->container['error_name'] = $error_name;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets error_detail
     *
     * @return string[]|null
     */
    public function getErrorDetail()
    {
        return $this->container['error_detail'];
    }

    /**
     * Sets error_detail
     *
     * @param string[]|null $error_detail error_detail
     *
     * @return $this
     */
    public function setErrorDetail($error_detail)
    {
        $this->container['error_detail'] = $error_detail;

        return $this;
    }

    /**
     * Gets processor_name
     *
     * @return string|null
     */
    public function getProcessorName()
    {
        return $this->container['processor_name'];
    }

    /**
     * Sets processor_name
     *
     * @param string|null $processor_name processor_name
     *
     * @return $this
     */
    public function setProcessorName($processor_name)
    {
        $this->container['processor_name'] = $processor_name;

        return $this;
    }

    /**
     * Gets processor_result
     *
     * @return string|null
     */
    public function getProcessorResult()
    {
        return $this->container['processor_result'];
    }

    /**
     * Sets processor_result
     *
     * @param string|null $processor_result processor_result
     *
     * @return $this
     */
    public function setProcessorResult($processor_result)
    {
        $this->container['processor_result'] = $processor_result;

        return $this;
    }

    /**
     * Gets processor_message
     *
     * @return string|null
     */
    public function getProcessorMessage()
    {
        return $this->container['processor_message'];
    }

    /**
     * Sets processor_message
     *
     * @param string|null $processor_message processor_message
     *
     * @return $this
     */
    public function setProcessorMessage($processor_message)
    {
        $this->container['processor_message'] = $processor_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


