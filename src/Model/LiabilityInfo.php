<?php
/**
 * LiabilityInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Soxyl\Saferpay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Saferpay JSON API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Soxyl\Saferpay\Model;

use \ArrayAccess;
use \Soxyl\Saferpay\ObjectSerializer;

/**
 * LiabilityInfo Class Doc Comment
 *
 * @category Class
 * @package  Soxyl\Saferpay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LiabilityInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LiabilityInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'liability_shift' => 'bool',
        'liable_entity' => 'string',
        'three_ds' => '\Soxyl\Saferpay\Model\ThreeDsInfo',
        'fraud_free' => '\Soxyl\Saferpay\Model\FraudFreeInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'liability_shift' => null,
        'liable_entity' => null,
        'three_ds' => null,
        'fraud_free' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'liability_shift' => 'LiabilityShift',
        'liable_entity' => 'LiableEntity',
        'three_ds' => 'ThreeDs',
        'fraud_free' => 'FraudFree'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'liability_shift' => 'setLiabilityShift',
        'liable_entity' => 'setLiableEntity',
        'three_ds' => 'setThreeDs',
        'fraud_free' => 'setFraudFree'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'liability_shift' => 'getLiabilityShift',
        'liable_entity' => 'getLiableEntity',
        'three_ds' => 'getThreeDs',
        'fraud_free' => 'getFraudFree'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['liability_shift'] = isset($data['liability_shift']) ? $data['liability_shift'] : null;
        $this->container['liable_entity'] = isset($data['liable_entity']) ? $data['liable_entity'] : null;
        $this->container['three_ds'] = isset($data['three_ds']) ? $data['three_ds'] : null;
        $this->container['fraud_free'] = isset($data['fraud_free']) ? $data['fraud_free'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['liability_shift'] === null) {
            $invalidProperties[] = "'liability_shift' can't be null";
        }
        if ($this->container['liable_entity'] === null) {
            $invalidProperties[] = "'liable_entity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets liability_shift
     *
     * @return bool
     */
    public function getLiabilityShift()
    {
        return $this->container['liability_shift'];
    }

    /**
     * Sets liability_shift
     *
     * @param bool $liability_shift liability_shift
     *
     * @return $this
     */
    public function setLiabilityShift($liability_shift)
    {
        $this->container['liability_shift'] = $liability_shift;

        return $this;
    }

    /**
     * Gets liable_entity
     *
     * @return string
     */
    public function getLiableEntity()
    {
        return $this->container['liable_entity'];
    }

    /**
     * Sets liable_entity
     *
     * @param string $liable_entity liable_entity
     *
     * @return $this
     */
    public function setLiableEntity($liable_entity)
    {
        $this->container['liable_entity'] = $liable_entity;

        return $this;
    }

    /**
     * Gets three_ds
     *
     * @return \Soxyl\Saferpay\Model\ThreeDsInfo|null
     */
    public function getThreeDs()
    {
        return $this->container['three_ds'];
    }

    /**
     * Sets three_ds
     *
     * @param \Soxyl\Saferpay\Model\ThreeDsInfo|null $three_ds three_ds
     *
     * @return $this
     */
    public function setThreeDs($three_ds)
    {
        $this->container['three_ds'] = $three_ds;

        return $this;
    }

    /**
     * Gets fraud_free
     *
     * @return \Soxyl\Saferpay\Model\FraudFreeInfo|null
     */
    public function getFraudFree()
    {
        return $this->container['fraud_free'];
    }

    /**
     * Sets fraud_free
     *
     * @param \Soxyl\Saferpay\Model\FraudFreeInfo|null $fraud_free fraud_free
     *
     * @return $this
     */
    public function setFraudFree($fraud_free)
    {
        $this->container['fraud_free'] = $fraud_free;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


